import{_ as p,r as e,o,c,a as n,e as t,b as s,d as i}from"./app.91a380bb.js";const l={},u=n("h1",{id:"\u5355\u5143\u6D4B\u8BD5",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u5355\u5143\u6D4B\u8BD5","aria-hidden":"true"},"#"),s(" \u5355\u5143\u6D4B\u8BD5")],-1),r={href:"https://vitest.dev/",target:"_blank",rel:"noopener noreferrer"},k=s("vitest"),d={href:"https://jestjs.io/",target:"_blank",rel:"noopener noreferrer"},v=s("jest"),m=i(`<h2 id="jest" tabindex="-1"><a class="header-anchor" href="#jest" aria-hidden="true">#</a> Jest</h2><p>\u5B89\u88C5</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> --save-dev jest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u7B2C\u4E00\u4E2A\u6D4B\u8BD5</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// main.js</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">-</span> b
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  add<span class="token punctuation">,</span>
  sub
<span class="token punctuation">}</span>

<span class="token comment">// main.test.js</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> add<span class="token punctuation">,</span> sub <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./main&#39;</span><span class="token punctuation">)</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;5+5=10&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;5-5=0&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">sub</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u914D\u7F6E\u6D4B\u8BD5\u547D\u4EE4</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;jest&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u521D\u59CB\u5316<code>Jest</code>\u914D\u7F6E</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">pnpm</span> jest init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u9ED8\u8BA4\u914D\u7F6E\u4F1A\u751F\u6210\u7EC8\u7AEF\u6D4B\u8BD5\u8986\u76D6\u7387\u62A5\u544A\uFF0C\u548C<code>covrage</code>\u6587\u4EF6\u5939\u91CC\u9762\u7684\u524D\u7AEF\u7F51\u9875\u62A5\u544A</p><p><code>Jest</code> \u7684\u5339\u914D\u5668</p><ul><li><code>toBe()</code>\u5339\u914D\u5668\uFF0C\u662F\u5728\u5DE5\u4F5C\u4E2D\u6700\u5E38\u7528\u7684\u4E00\u79CD\u5339\u914D\u5668\uFF0C\u7B80\u5355\u7684\u7406\u89E3\u5B83\u5C31\u662F\u76F8\u7B49\u3002\u8FD9\u4E2A\u76F8\u5F53\u662F\u7B49\u540C\u4E8E===\u7684\uFF0C\u4E5F\u5C31\u662F\u6211\u4EEC\u5E38\u8BF4\u7684\u4E25\u683C\u76F8\u7B49</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// pass</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;toBe\u5339\u914D\u5668&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&#39;\u8FD9\u662F\u4E00\u4E2AtoBe&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">&#39;\u8FD9\u662F\u4E00\u4E2AtoBe&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// FAIL</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;toBe\u5339\u914D\u5668\u5B8C\u5168\u76F8\u7B49&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">999</span> <span class="token punctuation">}</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">999</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>toEqual()</code>\u5339\u914D\u5668\uFF0C\u5185\u5BB9\u76F8\u7B49\uFF0C\u5C31\u53EF\u4EE5\u901A\u8FC7\u6D4B\u8BD5</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// pass</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;toBe\u5339\u914D\u5668\u5B8C\u5168\u76F8\u7B49&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">999</span> <span class="token punctuation">}</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">999</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5F53\u4F60\u4E0D\u4E25\u683C\u5339\u914D\u4F46\u8981\u6C42\u503C\u76F8\u7B49\u65F6\u65F6\u5C31\u53EF\u4EE5\u4F7F\u7528<code>toEqual()</code>\u5339\u914D\u5668</p><ul><li><code>toBeNul()</code> \u5339\u914D\u5668\u53EA\u5339\u914D<code>null</code>\u503C\uFF0C\u9700\u8981\u6CE8\u610F\u7684\u662F\u4E0D\u5339\u914D<code>undefined</code>\u7684\u503C</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;toBeNul \u53EA\u5339\u914Dnull&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// \u7B49\u4EF7\u4E8E</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;toBeNul \u53EA\u5339\u914Dnull&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>toBeUndifined()</code>\u5339\u914D</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;toBeUndifined&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">undefined</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeUndefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>toBeDefined()</code> \u53EA\u8981\u5B9A\u4E49\u8FC7\u5C31\u53EF\u4EE5\u901A\u8FC7</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;toBeDefine&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeDefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>toBeTruthy()</code> \u53EA\u8981\u4E0D\u662F<code>false</code>\uFF0C<code>0</code>\uFF0C<code>&quot;&quot;</code>\uFF0C<code>null</code>\uFF0C<code>undefined</code>\uFF0C<code>NaN</code>\uFF0C\u5C31\u53EF\u4EE5\u901A\u8FC7</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// pass</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;toBeTruthy&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// fail</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;toBeTruthy&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>toBeFalsy()</code> \u4E0E<code>toBeTruthy()</code>\u76F8\u5BF9</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;toBeFalsy&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeFalsy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>toBeGreaterThan(number | bigint)</code>\u5927\u4E8E\u4EC0\u4E48\u6570\u503C\uFF0C\u53EA\u8981\u5927\u4E8E\u4F20\u5165\u7684\u6570\u503C\uFF0C\u5C31\u53EF\u4EE5\u901A\u8FC7\u6D4B\u8BD5</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;toBeGreaterThan\u5339\u914D\u5668&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">10</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeGreaterThan</span><span class="token punctuation">(</span><span class="token number">9.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;toBeGreaterThan\u5339\u914D\u5668&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">10n</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeGreaterThan</span><span class="token punctuation">(</span><span class="token number">9n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>toBeGreaterThanOrEqual(number | bigint)</code>\u5927\u4E8E\u7B49\u4E8E\u4EC0\u4E48\u6570\u503C\uFF0C\u53EA\u8981\u5927\u4E8E\u7B49\u4E8E\u4F20\u5165\u7684\u6570\u503C\uFF0C\u5C31\u53EF\u4EE5\u901A\u8FC7\u6D4B\u8BD5</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">toBeGreaterThanOrEqual()</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">10</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeGreaterThanOrEqual</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>toBeLessThan(number | bigint)</code> \u5C0F\u4E8E\u4EC0\u4E48\u6570\u503C\uFF0C\u53EA\u8981\u5C0F\u4E8E\u4F20\u5165\u7684\u6570\u503C\uFF0C\u5C31\u53EF\u4EE5\u901A\u8FC7\u6D4B\u8BD5</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">toBeLessThan()</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">10</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeLessThan</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>toBeLessThanOrEqual(number | bigint)</code> \u5C0F\u4E8E\u7B49\u4E8E\u4EC0\u4E48\u6570\u503C\uFF0C\u53EA\u8981\u5C0F\u4E8E\u7B49\u4E8E\u4F20\u5165\u7684\u6570\u503C\uFF0C\u5C31\u53EF\u4EE5\u901A\u8FC7\u6D4B\u8BD5</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">toBeLessThanOrEqual()</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">10</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeLessThanOrEqual</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>toBeCloseTo(number, numDigits?)</code> \u8FD9\u4E2A\u662F\u53EF\u4EE5\u81EA\u52A8\u6D88\u9664JavaScript\u6D6E\u70B9\u7CBE\u5EA6\u9519\u8BEF\u7684\u5339\u914D\u5668</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// fails</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;toEqual\u5339\u914D\u5668&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> one <span class="token operator">=</span> <span class="token number">0.1</span>
  <span class="token keyword">const</span> two <span class="token operator">=</span> <span class="token number">0.2</span>
  <span class="token comment">// expect(one + two).toEqual(0.3)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// pass</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;toBeCloseTo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> one <span class="token operator">=</span> <span class="token number">0.1</span>
  <span class="token keyword">const</span> two <span class="token operator">=</span> <span class="token number">0.2</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>one <span class="token operator">+</span> two<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCloseTo</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>toMatch(regexp | string)</code> \u5B57\u7B26\u4E32\u5305\u542B\u5339\u914D\u5668</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;toMatch()&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">&#39;qwertyuiop&#39;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toMatch</span><span class="token punctuation">(</span><span class="token string">&#39;iop&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>toContain(item)</code> \u5B57\u7B26\u4E32\u6570\u7EC4\u5305\u542B\u5339\u914D\u5668</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;toContain()&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;toContain()&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span>
  <span class="token keyword">const</span> mySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>mySet<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toContain</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>toThrow(error?)</code> \u4E13\u95E8\u5BF9\u5F02\u5E38\u8FDB\u884C\u5904\u7406\u7684\u5339\u914D\u5668\uFF0C\u53EF\u4EE5\u68C0\u6D4B\u4E00\u4E2A\u65B9\u6CD5\u4F1A\u4E0D\u4F1A\u629B\u51FA\u5F02\u5E38,\u53EF\u4EE5\u5BF9\u8FD9\u4E2A\u5339\u914D\u5668\u4E2D\u52A0\u4E00\u4E9B\u5B57\u7B26\u4E32\uFF0C\u610F\u601D\u5C31\u662F\u629B\u51FA\u7684\u5F02\u5E38\u5FC5\u987B\u548C\u5B57\u7B26\u4E32\u76F8\u5BF9\u5E94,\u5982\u679C\u5B57\u7B26\u4E32\u4E0D\u5339\u914D\uFF0C\u4E5F\u6CA1\u529E\u6CD5\u901A\u8FC7\u5F02\u5E38\u6D4B\u8BD5</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;toThrow&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toThrow</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>.not</code> \u53D6\u53CD</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;not&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5F15\u5165es6\u652F\u6301\u548Cimport" tabindex="-1"><a class="header-anchor" href="#\u5F15\u5165es6\u652F\u6301\u548Cimport" aria-hidden="true">#</a> \u5F15\u5165<code>ES6</code>\u652F\u6301\u548C<code>import</code></h3><p><code>Jest</code> \u9ED8\u8BA4\u652F\u6301\u7684\u662F <code>CommonJS</code> \u89C4\u8303,\u4F7F\u7528<code>babel</code> \u8F6C\u6362\u6210 <code>CommonJS</code> \u89C4\u8303</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> --save-dev babel-jest @babel/core @babel/preset-env
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>\u53EF\u4EE5\u5728\u5DE5\u7A0B\u7684\u6839\u76EE\u5F55\u4E0B\u521B\u5EFA\u4E00\u4E2A<code>babel.config.js</code>\u6587\u4EF6\u7528\u4E8E\u914D\u7F6E\u4E0E\u4F60\u5F53\u524DNode\u7248\u672C\u517C\u5BB9\u7684<code>Babel</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;@babel/preset-env&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">targets</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token string">&#39;current&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5F02\u6B65\u4EE3\u7801\u7684\u6D4B\u8BD5\u65B9\u6CD5-1\u56DE\u8C03\u51FD\u6570\u5F0F" tabindex="-1"><a class="header-anchor" href="#\u5F02\u6B65\u4EE3\u7801\u7684\u6D4B\u8BD5\u65B9\u6CD5-1\u56DE\u8C03\u51FD\u6570\u5F0F" aria-hidden="true">#</a> \u5F02\u6B65\u4EE3\u7801\u7684\u6D4B\u8BD5\u65B9\u6CD5-1\u56DE\u8C03\u51FD\u6570\u5F0F</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// fetchData.js</span>
<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getPost</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://jsonplaceholder.typicode.com/posts/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">fn</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// fetchData.test.jsimport { getPost } from &quot;./fetchData&quot;;</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u5F02\u6B65\u4EE3\u7801\u6D4B\u8BD5&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">getPost</span><span class="token punctuation">(</span><span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5728\u6D4B\u8BD5\u4EE3\u7801\u4E2D\u4F7F\u7528<code>done</code>\u8868\u793A\u4FDD\u8BC1\u6211\u4EEC\u7684\u56DE\u8C03\u5DF2\u7ECF\u5B8C\u6210\u4E86</p><h3 id="\u5F02\u6B65\u4EE3\u7801\u7684\u6D4B\u8BD5\u65B9\u6CD5-2\u76F4\u63A5\u8FD4\u56DEpromise" tabindex="-1"><a class="header-anchor" href="#\u5F02\u6B65\u4EE3\u7801\u7684\u6D4B\u8BD5\u65B9\u6CD5-2\u76F4\u63A5\u8FD4\u56DEpromise" aria-hidden="true">#</a> \u5F02\u6B65\u4EE3\u7801\u7684\u6D4B\u8BD5\u65B9\u6CD5-2\u76F4\u63A5\u8FD4\u56DEpromise</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getPost2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://jsonplaceholder.typicode.com/posts/2&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u5F02\u6B65\u4EE3\u7801\u6D4B\u8BD5 \u8FD4\u56DEpromise&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">getPost2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5F02\u6B65\u4EE3\u7801\u7684\u6D4B\u8BD5\u65B9\u6CD5-3\u4E0D\u5B58\u5728\u63A5\u53E3\u7684\u6D4B\u8BD5\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u5F02\u6B65\u4EE3\u7801\u7684\u6D4B\u8BD5\u65B9\u6CD5-3\u4E0D\u5B58\u5728\u63A5\u53E3\u7684\u6D4B\u8BD5\u65B9\u6CD5" aria-hidden="true">#</a> \u5F02\u6B65\u4EE3\u7801\u7684\u6D4B\u8BD5\u65B9\u6CD5-3\u4E0D\u5B58\u5728\u63A5\u53E3\u7684\u6D4B\u8BD5\u65B9\u6CD5</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u6D4B\u8BD5\u63A5\u53E3\u9519\u8BEF&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  expect<span class="token punctuation">.</span><span class="token function">assertions</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// \u5FC5\u987B\u6267\u884C\u4E00\u6B21</span>
  <span class="token keyword">return</span> <span class="token function">getError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">expect</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;404&#39;</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>expect.assertions(1)</code>\u5FC5\u987B\u6267\u884C\u4E00\u6B21<code>expect</code>\u5426\u5219<code>catch</code>\u53EA\u6709\u5F02\u5E38\u624D\u4F1A\u6267\u884C</p><h3 id="\u5F02\u6B65\u4EE3\u7801\u7684\u6D4B\u8BD5\u65B9\u6CD5-4async-await" tabindex="-1"><a class="header-anchor" href="#\u5F02\u6B65\u4EE3\u7801\u7684\u6D4B\u8BD5\u65B9\u6CD5-4async-await" aria-hidden="true">#</a> \u5F02\u6B65\u4EE3\u7801\u7684\u6D4B\u8BD5\u65B9\u6CD5-4async...await</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\u5F02\u6B65\u4EE3\u7801\u6D4B\u8BD5 async await&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getPost2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">expect</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEqual</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jest\u4E2D\u7684\u56DB\u4E2A\u94A9\u5B50\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#jest\u4E2D\u7684\u56DB\u4E2A\u94A9\u5B50\u51FD\u6570" aria-hidden="true">#</a> Jest\u4E2D\u7684\u56DB\u4E2A\u94A9\u5B50\u51FD\u6570</h3><ul><li><p><code>beforeAll</code> \u5728\u6240\u6709\u6D4B\u8BD5\u7528\u4F8B\u4E4B\u524D\u8FDB\u884C\u6267\u884C\u3002</p></li><li><p><code>afterAll</code> \u662F\u5728\u5B8C\u6210\u6240\u6709\u6D4B\u8BD5\u7528\u4F8B\u4E4B\u540E\u624D\u6267\u884C\u7684\u51FD\u6570\u3002</p></li><li><p><code>beforeEach</code> \u94A9\u5B50\u51FD\u6570\uFF0C\u662F\u5728\u6BCF\u4E2A\u6D4B\u8BD5\u7528\u4F8B\u524D\u90FD\u4F1A\u6267\u884C\u4E00\u6B21\u7684\u94A9\u5B50\u51FD\u6570</p></li><li><p><code>afterEach</code> \u5728\u6BCF\u6B21\u6D4B\u8BD5\u7528\u4F8B\u5B8C\u6210\u6D4B\u8BD5\u4E4B\u540E\u6267\u884C\u4E00\u6B21\u7684\u94A9\u5B50\u51FD\u6570</p></li></ul>`,61);function b(g,f){const a=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",r,[k,t(a)])]),n("p",null,[n("a",d,[v,t(a)])]),m])}const j=p(l,[["render",b],["__file","\u5355\u5143\u6D4B\u8BD5.html.vue"]]);export{j as default};
