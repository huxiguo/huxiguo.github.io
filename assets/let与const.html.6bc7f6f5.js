import{_ as n,o as s,c as a,d as e}from"./app.91a380bb.js";const o={},t=e(`<h1 id="let-\u4E0E-const" tabindex="-1"><a class="header-anchor" href="#let-\u4E0E-const" aria-hidden="true">#</a> let \u4E0E const</h1><p><code>ES2015(ES6)</code>\u65B0\u589E\u52A0\u4E86\u4E24\u4E2A\u91CD\u8981\u7684<code>JavaScript</code>\u5173\u952E\u5B57: <code>let</code>\u548C<code>const</code>\u3002</p><h2 id="\u5757\u7EA7\u4F5C\u7528\u57DF" tabindex="-1"><a class="header-anchor" href="#\u5757\u7EA7\u4F5C\u7528\u57DF" aria-hidden="true">#</a> \u5757\u7EA7\u4F5C\u7528\u57DF</h2><p>\u4EE3\u7801\u5757\u5185\u5982\u679C\u5B58\u5728<code>let</code>\u6216\u8005<code>const</code>\uFF0C\u4EE3\u7801\u5757\u4F1A\u5BF9\u8FD9\u4E9B\u547D\u4EE4\u58F0\u660E\u7684\u53D8\u91CF\u4ECE\u5757\u7684\u5F00\u59CB\u5C31\u5F62\u6210\u4E00\u4E2A\u5C01\u95ED\u4F5C\u7528\u57DF\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/*
      ...
      [[Scopes]]: Scopes[2]
        0: Block {a: 1}
        1: Global ...
    */</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u6B64\u5904\u4E0D\u80FD\u4F7F\u7528 a \uFF0Ca \u662F\u5757\u7EA7\u4F5C\u7528\u57DF</span>
<span class="token comment">// \u6B64\u5904\u53EF\u4EE5\u4F7F\u7528 b , b \u5728\u6B64\u5904\u662F\u5168\u5C40\u4F5C\u7528\u57DF</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>[[Scopes]]</code>\u662F\u4FDD\u5B58\u51FD\u6570\u4F5C\u7528\u57DF\u94FE\u7684\u5BF9\u8C61\uFF0C\u662F\u51FD\u6570\u7684\u5185\u90E8\u5C5E\u6027\u65E0\u6CD5\u76F4\u63A5\u8BBF\u95EE\uFF0C<code>[[Scopes]]</code>\u4E2D\u53EF\u4EE5\u770B\u5230\u51FA\u73B0\u4E86\u4E00\u4E2A<code>Block</code>\u5757\u7EA7\u4F5C\u7528\u57DF\uFF0C\u8FD9\u4F7F\u5F97<code>let</code>\u7279\u522B\u9002\u5408\u5728<code>for</code>\u4E2D\u4F7F\u7528\uFF0C\u5728<code>ECMAScript 2015</code>\u5F15\u5165<code>let</code>\u5173\u952E\u5B57\u4E4B\u524D\uFF0C\u53EA\u6709\u51FD\u6570\u4F5C\u7528\u57DF\u548C\u5168\u5C40\u4F5C\u7528\u57DF\uFF0C\u51FD\u6570\u4F5C\u7528\u57DF\u4E2D\u53C8\u53EF\u4EE5\u7EE7\u7EED\u5D4C\u5957\u51FD\u6570\u4F5C\u7528\u57DF\uFF0C\u5728<code>for</code>\u5E76\u672A\u5177\u5907\u5C40\u90E8\u4F5C\u7528\u57DF\uFF0C\u4E8E\u662F\u6709\u4E00\u4E2A\u5E38\u89C1\u7684\u95ED\u5305\u521B\u5EFA\u95EE\u9898\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> coun <span class="token operator">=</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>coun<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3 3 3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u53EF\u4EE5\u770B\u5230\u8FD0\u884C\u8F93\u51FA\u662F<code>3 3 3</code>\uFF0C\u800C\u5E76\u4E0D\u662F\u671F\u671B\u7684<code>0 1 2</code>\uFF0C\u539F\u56E0\u662F\u8FD9\u4E09\u4E2A\u95ED\u5305\u5728\u5FAA\u73AF\u4E2D\u88AB\u521B\u5EFA\u7684\u65F6\u5019\uFF0C\u5171\u4EAB\u4E86\u540C\u4E00\u4E2A\u8BCD\u6CD5\u4F5C\u7528\u57DF\uFF0C\u8FD9\u4E2A\u4F5C\u7528\u57DF\u7531\u4E8E\u5B58\u5728\u4E00\u4E2A<code>i</code>\u7531<code>var</code>\u58F0\u660E\uFF0C\u7531\u4E8E\u53D8\u91CF\u63D0\u5347\uFF0C\u5177\u6709\u51FD\u6570\u4F5C\u7528\u57DF\uFF0C\u5F53\u6267\u884C\u95ED\u5305\u51FD\u6570\u7684\u65F6\u5019\uFF0C\u7531\u4E8E\u5FAA\u73AF\u65E9\u5DF2\u6267\u884C\u5B8C\u6BD5\uFF0C<code>i</code>\u5DF2\u7ECF\u88AB\u8D4B\u503C\u4E3A<code>3</code>\uFF0C\u6240\u4EE5\u6253\u5370\u4E3A<code>3 3 3</code>\uFF0C\u53EF\u4EE5\u4F7F\u7528<code>let</code>\u5173\u952E\u5B57\u58F0\u660E<code>i</code>\u6765\u521B\u5EFA\u5757\u7EA7\u4F5C\u7528\u57DF\u89E3\u51B3\u8FD9\u4E2A\u95EE\u9898</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> coun <span class="token operator">=</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>coun<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 1 2</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5F53\u7136\u4E5F\u53EF\u4EE5\u4F7F\u7528\u533F\u540D\u51FD\u6570\u65B0\u5EFA\u51FD\u6570\u4F5C\u7528\u57DF\u6765\u89E3\u51B3</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> i<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> coun <span class="token operator">=</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>coun<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 1 2</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u4E00\u6B21\u58F0\u660E" tabindex="-1"><a class="header-anchor" href="#\u4E00\u6B21\u58F0\u660E" aria-hidden="true">#</a> \u4E00\u6B21\u58F0\u660E</h2><p>\u540C\u4E00\u4F5C\u7528\u57DF\u5185<code>let</code>\u548C<code>const</code>\u53EA\u80FD\u58F0\u660E\u4E00\u6B21\uFF0C<code>var</code>\u53EF\u4EE5\u58F0\u660E\u591A\u6B21</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//Uncaught SyntaxError: Identifier &#39;a&#39; has already been declared</span>

<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//Uncaught SyntaxError: Identifier &#39;b&#39; has already been declared</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6682\u65F6\u6027\u6B7B\u533A" tabindex="-1"><a class="header-anchor" href="#\u6682\u65F6\u6027\u6B7B\u533A" aria-hidden="true">#</a> \u6682\u65F6\u6027\u6B7B\u533A</h2><p>\u5F53\u4F7F\u7528<code>let</code>\u4E0E<code>const</code>\u751F\u6210\u5757\u7EA7\u4F5C\u7528\u57DF\u65F6\uFF0C\u4EE3\u7801\u5757\u4F1A\u5BF9\u8FD9\u4E9B\u547D\u4EE4\u58F0\u660E\u7684\u53D8\u91CF\u4ECE\u5757\u7684\u5F00\u59CB\u5C31\u5F62\u6210\u4E00\u4E2A\u5C01\u95ED\u4F5C\u7528\u57DF\uFF0C\u4EE3\u7801\u5757\u5185\uFF0C\u5728\u58F0\u660E\u53D8\u91CF\u4E4B\u524D\u4F7F\u7528\u5B83\u4F1A\u62A5\u9519\uFF0C\u79F0\u4E3A\u6682\u65F6\u6027\u6B7B\u533A\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught ReferenceError: Cannot access &#39;a&#39; before initialization</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u53D8\u91CF\u63D0\u5347" tabindex="-1"><a class="header-anchor" href="#\u53D8\u91CF\u63D0\u5347" aria-hidden="true">#</a> \u53D8\u91CF\u63D0\u5347</h2><p><code>let</code>\u4E0E<code>const</code>\u4E5F\u5B58\u5728\u53D8\u91CF\u63D0\u5347\uFF0C\u5728<code>ES6</code>\u7684\u6587\u6863\u4E2D\u51FA\u73B0\u4E86<code>var/let hoisting</code>\u5B57\u6837\uFF0C\u4E5F\u5C31\u662F\u8BF4\u5B98\u65B9\u6587\u6863\u8BF4\u660E<code>let</code>\u4E0E<code>var</code>\u4E00\u6837\uFF0C\u90FD\u5B58\u5728\u53D8\u91CF\u63D0\u5347\uFF0C\u4F46\u662F\u4E0E<code>var</code>\u7684\u53D8\u91CF\u63D0\u5347\u6709\u6240\u4E0D\u540C</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>let \u7684\u300C\u521B\u5EFA\u300D\u8FC7\u7A0B\u88AB\u63D0\u5347\u4E86\uFF0C\u4F46\u662F\u521D\u59CB\u5316\u6CA1\u6709\u63D0\u5347\u3002
var \u7684\u300C\u521B\u5EFA\u300D\u548C\u300C\u521D\u59CB\u5316\u300D\u90FD\u88AB\u63D0\u5347\u4E86\u3002
function \u7684\u300C\u521B\u5EFA\u300D\u300C\u521D\u59CB\u5316\u300D\u548C\u300C\u8D4B\u503C\u300D\u90FD\u88AB\u63D0\u5347\u4E86\u3002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5728<code>stackoverflow</code>\u4E2D\u6BD4\u8F83\u6709\u8BF4\u670D\u529B\u7684\u4F8B\u5B50</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>x <span class="token operator">=</span> <span class="token string">&quot;global&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// function scope:</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    x<span class="token punctuation">;</span> <span class="token comment">// not &quot;global&quot;</span>

    <span class="token keyword">var</span><span class="token operator">/</span><span class="token keyword">let</span><span class="token operator">/</span>\u2026 x<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// block scope (not for \`var\`s):</span>
<span class="token punctuation">{</span>
    x<span class="token punctuation">;</span> <span class="token comment">// not &quot;global&quot;</span>

    <span class="token keyword">let</span><span class="token operator">/</span><span class="token keyword">const</span><span class="token operator">/</span>\u2026 x<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>js</code>\u4E2D\u65E0\u8BBA\u54EA\u79CD\u5F62\u5F0F\u58F0\u660E<code>var</code>,<code>let</code>,<code>const</code>,<code>function</code>,<code>function*</code>,<code>class</code>\u90FD\u4F1A\u5B58\u5728\u63D0\u5347\u73B0\u8C61\uFF0C\u4E0D\u540C\u7684\u662F\uFF0C<code>var</code>,<code>function</code>,<code>function*</code>\u7684\u58F0\u660E\u4F1A\u5728\u63D0\u5347\u65F6\u8FDB\u884C\u521D\u59CB\u5316\u8D4B\u503C\u4E3A undefined\uFF0C\u56E0\u6B64\u8BBF\u95EE\u8FD9\u4E9B\u53D8\u91CF\u7684\u65F6\u5019\uFF0C\u4E0D\u4F1A\u62A5<code>ReferenceError</code>\u5F02\u5E38\uFF0C\u800C\u4F7F\u7528<code>let</code>,<code>const</code>,<code>class</code>\u58F0\u660E\u7684\u53D8\u91CF\uFF0C\u88AB\u63D0\u5347\u540E\u4E0D\u4F1A\u88AB\u521D\u59CB\u5316\uFF0C\u8FD9\u4E9B\u53D8\u91CF\u6240\u5904\u7684\u72B6\u6001\u88AB\u79F0\u4E3A<code>temporal dead zone</code>\uFF0C\u6B64\u65F6\u5982\u679C\u8BBF\u95EE\u8FD9\u4E9B\u53D8\u91CF\u4F1A\u629B\u51FA<code>ReferenceError</code>\u5F02\u5E38\uFF0C\u770B\u4E0A\u53BB\u5C31\u50CF\u6CA1\u88AB\u63D0\u5347\u4E00\u6837\u3002</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>https://blog.csdn.net/jolab/article/details/82466362
https://www.jianshu.com/p/0f49c88cf169
https://stackoverflow.com/questions/31219420/are-variables-declared-with-let-or-const-not-hoisted-in-es6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="window" tabindex="-1"><a class="header-anchor" href="#window" aria-hidden="true">#</a> window</h2><p>\u5728\u5168\u5C40\u4F5C\u7528\u57DF\u4E2D\u4F7F\u7528<code>var</code>\u76F4\u63A5\u58F0\u660E\u53D8\u91CF\u6216\u65B9\u6CD5\u7B49\u4F1A\u6302\u8F7D\u5230<code>window</code>\u5BF9\u8C61\u4E0A\uFF0C<code>let</code>\u4E0E<code>const</code>\u58F0\u660E\u53D8\u91CF\u6216\u65B9\u6CD5\u7B49\u4F1A\u4FDD\u5B58\u5728<code>Script</code>\u4F5C\u7528\u57DF\u4E2D</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">{</span>
  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">/*
      ...
      [[Scopes]]: Scopes[3]
        0: Block {b: 2}
        1: Script {a: 1}
        2: Global ...
    */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u521D\u59CB\u5316" tabindex="-1"><a class="header-anchor" href="#\u521D\u59CB\u5316" aria-hidden="true">#</a> \u521D\u59CB\u5316</h2><p><code>var</code>\u4E0E<code>let</code>\u5728\u58F0\u660E\u65F6\u53EF\u4EE5\u4E0D\u8D4B\u521D\u503C\uFF0C<code>const</code>\u5FC5\u987B\u8D4B\u521D\u503C</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> a<span class="token punctuation">;</span>
<span class="token keyword">let</span> b<span class="token punctuation">;</span>
<span class="token keyword">const</span> c<span class="token punctuation">;</span> <span class="token comment">//Uncaught SyntaxError: Missing initializer in const declaration</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u53EA\u8BFB\u5E38\u91CF" tabindex="-1"><a class="header-anchor" href="#\u53EA\u8BFB\u5E38\u91CF" aria-hidden="true">#</a> \u53EA\u8BFB\u5E38\u91CF</h2><p><code>const</code>\u7528\u4EE5\u58F0\u660E\u4E00\u4E2A\u53EA\u8BFB\u5E38\u91CF\uFF0C\u521D\u59CB\u5316\u540E\u503C\u4E0D\u53EF\u518D\u4FEE\u6539</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught TypeError: Assignment to constant variable.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>const</code>\u5176\u5B9E\u4FDD\u8BC1\u7684\u4E0D\u662F\u53D8\u91CF\u7684\u503C\u4E0D\u53D8\uFF0C\u800C\u662F\u4FDD\u8BC1\u53D8\u91CF\u6307\u5411\u7684\u5185\u5B58\u5730\u5740\u6240\u4FDD\u5B58\u7684\u6570\u636E\u4E0D\u5141\u8BB8\u6539\u52A8\u3002\u5BF9\u4E8E\u7B80\u5355\u7C7B\u578B<code>number</code>\u3001<code>string</code> \u3001<code>boolean</code>\u3001<code>Symbol</code>\uFF0C\u503C\u5C31\u4FDD\u5B58\u5728\u53D8\u91CF\u6307\u5411\u7684\u90A3\u4E2A\u5185\u5B58\u5730\u5740\uFF0C\u56E0\u6B64<code>const</code> \u58F0\u660E\u7684\u7B80\u5355\u7C7B\u578B\u53D8\u91CF\u7B49\u540C\u4E8E\u5E38\u91CF\u3002\u800C\u590D\u6742\u7C7B\u578B<code>object</code>\uFF0C<code>array</code>\uFF0C<code>function</code>\uFF0C\u53D8\u91CF\u6307\u5411\u7684\u5185\u5B58\u5730\u5740\u5176\u5B9E\u662F\u4FDD\u5B58\u4E86\u4E00\u4E2A\u6307\u5411\u5B9E\u9645\u6570\u636E\u7684\u6307\u9488\uFF0C\u6240\u4EE5<code>const</code>\u53EA\u80FD\u4FDD\u8BC1\u6307\u9488\u662F\u56FA\u5B9A\u7684\uFF0C\u81F3\u4E8E\u6307\u9488\u6307\u5411\u7684\u6570\u636E\u7ED3\u6784\u53D8\u4E0D\u53D8\u5C31\u65E0\u6CD5\u63A7\u5236\u4E86\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {}</span>
a<span class="token punctuation">.</span><span class="token function-variable function">s</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {s: \u0192}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36),p=[t];function c(i,l){return s(),a("div",null,p)}const d=n(o,[["render",c],["__file","let\u4E0Econst.html.vue"]]);export{d as default};
