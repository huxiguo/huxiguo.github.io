import{_ as n,o as s,c as a,d as p}from"./app.91a380bb.js";const t={},e=p(`<h1 id="\u52A0\u4E00" tabindex="-1"><a class="header-anchor" href="#\u52A0\u4E00" aria-hidden="true">#</a> \u52A0\u4E00</h1><p>\u7ED9\u5B9A\u4E00\u4E2A\u7531 \u6574\u6570 \u7EC4\u6210\u7684 \u975E\u7A7A \u6570\u7EC4\u6240\u8868\u793A\u7684\u975E\u8D1F\u6574\u6570\uFF0C\u5728\u8BE5\u6570\u7684\u57FA\u7840\u4E0A\u52A0\u4E00\u3002</p><p>\u6700\u9AD8\u4F4D\u6570\u5B57\u5B58\u653E\u5728\u6570\u7EC4\u7684\u9996\u4F4D\uFF0C \u6570\u7EC4\u4E2D\u6BCF\u4E2A\u5143\u7D20\u53EA\u5B58\u50A8\u5355\u4E2A\u6570\u5B57\u3002</p><p>\u4F60\u53EF\u4EE5\u5047\u8BBE\u9664\u4E86\u6574\u6570 0 \u4E4B\u5916\uFF0C\u8FD9\u4E2A\u6574\u6570\u4E0D\u4F1A\u4EE5\u96F6\u5F00\u5934\u3002</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1Adigits = [4,3,2,1]
\u8F93\u51FA\uFF1A[4,3,2,2]
\u89E3\u91CA\uFF1A\u8F93\u5165\u6570\u7EC4\u8868\u793A\u6570\u5B57 4321\u3002
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">digits</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">plusOne</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">digits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u6570\u7EC4\u8F6C\u5B57\u7B26\u4E32</span>
  <span class="token keyword">let</span> s <span class="token operator">=</span> digits<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token comment">// \u5B57\u7B26\u4E32\u8F6C\u6570\u5B57\u52A0\u4E00 Bigint</span>
  <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token comment">// \u8F6C\u56DE\u6570\u7EC4</span>
  <span class="token keyword">return</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">plusOne</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">digits</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> len <span class="token operator">=</span> digits<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token comment">// \u904D\u5386\u6570\u7EC4</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token comment">// \u5982\u679C\u52A0\u4E00\u540E\u7684\u503C\u6CA1\u6709\u8FDB\u4F4D\u8FD4\u56DE\u7ED3\u679C</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> digits<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5982\u679C\u5168\u90FD\u662F9\u7684\u60C5\u51B5</span>
    digits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">Array</span><span class="token punctuation">(</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">_</span><span class="token operator">=&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
    digits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> digits<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","\u52A0\u4E00.html.vue"]]);export{r as default};
