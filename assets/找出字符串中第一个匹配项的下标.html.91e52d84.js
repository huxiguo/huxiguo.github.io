import{_ as n,o as s,c as a,d as p}from"./app.91a380bb.js";const e={},t=p(`<h1 id="\u627E\u51FA\u5B57\u7B26\u4E32\u4E2D\u7B2C\u4E00\u4E2A\u5339\u914D\u9879\u7684\u4E0B\u6807" tabindex="-1"><a class="header-anchor" href="#\u627E\u51FA\u5B57\u7B26\u4E32\u4E2D\u7B2C\u4E00\u4E2A\u5339\u914D\u9879\u7684\u4E0B\u6807" aria-hidden="true">#</a> \u627E\u51FA\u5B57\u7B26\u4E32\u4E2D\u7B2C\u4E00\u4E2A\u5339\u914D\u9879\u7684\u4E0B\u6807</h1><p>\u7ED9\u4F60\u4E24\u4E2A\u5B57\u7B26\u4E32 haystack \u548C needle \uFF0C\u8BF7\u4F60\u5728 haystack \u5B57\u7B26\u4E32\u4E2D\u627E\u51FA needle \u5B57\u7B26\u4E32\u7684\u7B2C\u4E00\u4E2A\u5339\u914D\u9879\u7684\u4E0B\u6807\uFF08\u4E0B\u6807\u4ECE 0 \u5F00\u59CB\uFF09\u3002\u5982\u679C needle \u4E0D\u662F haystack \u7684\u4E00\u90E8\u5206\uFF0C\u5219\u8FD4\u56DE -1 \u3002</p><h2 id="\u666E\u901A\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#\u666E\u901A\u65B9\u6CD5" aria-hidden="true">#</a> \u666E\u901A\u65B9\u6CD5</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">strStr</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">haystack<span class="token punctuation">,</span> needle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> hLen <span class="token operator">=</span> haystack<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">let</span> nLen <span class="token operator">=</span> needle<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token comment">// \u4ECE\u7B2C\u4E00\u4E2A\u5F00\u59CB\u5411\u540E\u5339\u914D</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> hLen <span class="token operator">-</span> nLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u539F\u59CB\u5B57\u7B26\u4E32\u7684\u5339\u914D\u4F4D\u7F6E</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token comment">// \u76EE\u6807\u5B57\u7B26\u4E32\u7684\u8D77\u59CB\u4F4D\u7F6E</span>
    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> nLen <span class="token operator">&amp;&amp;</span> haystack<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">===</span> needle<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      a<span class="token operator">++</span><span class="token punctuation">;</span>
      b<span class="token operator">++</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5339\u914D\u6210\u529F\u8FD4\u56DE\u8D77\u59CB\u4F4D\u7F6E</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">===</span> nLen<span class="token punctuation">)</span> <span class="token keyword">return</span> i
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="kmp-\u7B97\u6CD5" tabindex="-1"><a class="header-anchor" href="#kmp-\u7B97\u6CD5" aria-hidden="true">#</a> KMP \u7B97\u6CD5</h2><p>\u5728\u5339\u914D\u51FA\u9519\u65F6\u4E0D\u628A\u5B57\u7B26\u4E32\u5B8C\u5168\u56DE\u9000\u91CD\u65B0\u4E0B\u4E00\u4F4D\u5339\u914D\uFF0C\u627E\u5230\u524D\u7F00\u8868\u8FDB\u884C\u56DE\u9000\u540E\u7EE7\u7EED\u5339\u914D</p><p>\u524D\u7F00\u8868 next\u6570\u7EC4</p><p>next\u6570\u7EC4\u5C31\u53EF\u4EE5\u662F\u524D\u7F00\u8868\uFF0C\u4F46\u662F\u5F88\u591A\u5B9E\u73B0\u90FD\u662F\u628A\u524D\u7F00\u8868\u7EDF\u4E00\u51CF\u4E00\uFF08\u53F3\u79FB\u4E00\u4F4D\uFF0C\u521D\u59CB\u4F4D\u7F6E\u4E3A-1\uFF09\u4E4B\u540E\u4F5C\u4E3Anext\u6570\u7EC4\u3002</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>needle<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
    i\uFF1A\u5F53\u524D\u5B50\u4E32\u7684\u540E\u7F00\u672B\u5C3E
    j\uFF1A\u4E0A\u4E00\u9879\u5B50\u4E32\u6700\u957F\u76F8\u7B49\u524D\u540E\u7F00\u7684\u4E0B\u4E00\u9879 \u6216\u8005 0 \uFF0C\u5E76\u4E14\u4E5F\u662F \u4E0A\u4E00\u9879\u5B50\u4E32\u6700\u957F\u76F8\u7B49\u524D\u540E\u7F00\u7684\u957F\u5EA6

    i\u4ECE1\u5F00\u59CB\uFF0Cj\u4ECE0\u5F00\u59CB\u3002\u56E0\u4E3A i \u548C j\u90FD\u662F0\u7684\u8BDD\u53EA\u6709\u4E00\u4E2A\uFF0C\u80AF\u5B9A\u662F0\uFF0C\u76F8\u5F53\u4E8E\u4E0A\u9762\u4F8B\u5B50\u4E2D\u7684 a
*/</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token number">1</span>
  <span class="token comment">// while\u5FAA\u73AF\uFF0C\u8981\u4E0D\u65AD\u7684\u5411\u4E0A\u5BFB\u627E\u3002</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> needle<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> needle<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5982\u679C\u4E0D\u540C\uFF0C\u6211\u4EEC\u8981\u4ECE\u672A\u5339\u914D\u597D\u7684\u5730\u65B9\u5F00\u59CB\u7EE7\u7EED\u5339\u914D\u3002</span>
    <span class="token comment">// \u672A\u5339\u914D\u597D\u7684\u4F4D\u7F6E\u662F\u90A3\u91CC\u5462\uFF1F \u{1F447}</span>
    <span class="token comment">// \u6211\u4EEC\u77E5\u9053 next \u6570\u7EC4\u7684\u503C\u5C31\u4EE3\u8868\u6BCF\u4E00\u6B21\u5B50\u4E32\u5339\u914D\u597D\u7684\u957F\u5EA6\uFF0C</span>
    <span class="token comment">// \u56E0\u4E3A\u6570\u7EC4\u662F\u4ECE0\u5F00\u59CB\u7684\uFF0C\u6240\u4EE5j - 1\u5C31\u6307\u5411\u4E86\u4E0A\u4E00\u4E2A\u5B50\u4E32\u672A\u5339\u914D\u597D\u7684\u4F4D\u7F6E\u3002</span>
    <span class="token comment">// \u5F53j === 0\u65F6\uFF0C\u8BF4\u660E\u8981\u4ECE\u5934\u5F00\u59CB\u91CD\u65B0\u5339\u914D\u4E86</span>
    j <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u5982\u679C\u5F53\u524D\u5B50\u4E32\u524D\u540E\u7F00\u76F8\u7B49\uFF0C\u5C31\u5C06\u66F4\u65B0\u5B50\u4E32\uFF0Cj++ i++</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>needle<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> needle<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    j<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u5C06\u5F53\u524D\u5B50\u4E32\u7684\u6700\u957F\u76F8\u7B49\u524D\u540E\u7F00\u6DFB\u52A0\u5230next\u6570\u7EC4\u4E2D</span>
  next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">strStr</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">haystack<span class="token punctuation">,</span> needle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> n <span class="token operator">=</span> haystack<span class="token punctuation">.</span>length
  <span class="token keyword">let</span> m <span class="token operator">=</span> needle<span class="token punctuation">.</span>length
  <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>

  <span class="token keyword">let</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> needle<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> needle<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      j <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>needle<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> needle<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      j<span class="token operator">++</span>
    <span class="token punctuation">}</span>
    next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j
  <span class="token punctuation">}</span>
  
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5982\u679C\u5F53\u524Di \u548C j\u4E0D\u4E00\u81F4\uFF0C\u5C31\u56DE\u9000\u5230\u4E0A\u4E00\u4E2A\u76F8\u7B49\u7684\u4F4D\u7F6E\u7684\u4E0B\u4E00\u4E2A\u770B\u770B\u662F\u5426\u5339\u914D</span>
    <span class="token comment">// \u4F1A\u4E0D\u65AD\u56DE\u9000\uFF0C0\u4E3A\u56DE\u9000\u5230\u8FB9\u754C\uFF0C\u5F53\u56DE\u9000\u52300\u610F\u5473\u7740\u8981\u91CD\u65B0\u4ECE\u5934\u5F00\u59CB\u5339\u914D</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> haystack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> needle<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      j <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>haystack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> needle<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      j<span class="token operator">++</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5F53j \u548C m\u7684\u957F\u5EA6\u76F8\u7B49\u65F6\uFF0C\u5C31\u8BF4\u660E\u5B58\u5728</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">===</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> i <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","\u627E\u51FA\u5B57\u7B26\u4E32\u4E2D\u7B2C\u4E00\u4E2A\u5339\u914D\u9879\u7684\u4E0B\u6807.html.vue"]]);export{r as default};
